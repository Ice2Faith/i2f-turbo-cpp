x86汇编语言介绍：
	CPU工作模式
		x86体系的CPU有两种基本的工作模式
			实模式
				也称为实地址模式，实现了处理器的程序设计环境。
				被早期Win9x和Dos支持，实模式下可访问的内存为1M。
				可以直接访问硬件，比如对端口进行操作、对中断进行操作
				现在的CPU依然支持，一方面是为了保持兼容，另一方面是所有的x86处理器都是从实模式引导起来的
			保护模式
				是处理器主要的工作模式，Linux和Windows NT内核的系统的系统都运行在保护模式下。
				保护模式下，每个进程可以访问的内存地址为4GB，且进程之间是隔离的
	基本寄存器介绍
		常用寄存器分类
			8个通用寄存器
			6个段寄存器
			1个标志寄存器
			1个指令指针寄存器
		32位通用寄存器
			数据寄存器：EAX、EBX、ECX、EDX
			指针、变址寄存器：EBP、ESP、ESI、EDI
			32位标志寄存器：EFLAGS
			16位段寄存器：CS、SS、DS  ES、FS、GS
			32位指令指针寄存器：EIP
		通用寄存器示意图（数据）：（也就是把一个寄存器当做不同位数的存储来使用）
			8位：AH、AL
			16位：AX
			32位：EAX
		通用寄存器示意图（指针、变址）：
			16位：SI
			32为：ESI
		部分寄存器的特殊用途：
			EAX在乘除法指令中自动被使用
			ECX被自动使用于循环计数器
			ESP作为栈指针寄存器，一般不参与运算
			ESI和EDI通常用于内存数据的高速传输，源指针寄存器和目标指针寄存器
			EIP指令指针寄存器，存放着下一条指令的地址，指引着程序的执行，一般情况下自动加上本条指令的长度以指向下一条指令，
				特殊的跳转指令会改变该值
			CS 代码段 DS 数据段 SS 栈段 ES 附加段，在32位中，新增了4个段寄存器，FS、GS也属于段寄存器
		标志寄存器
			16位中的标志寄存器：FLAGS
				条件标志寄存器：
					OF、SZ、ZF、AF、PF、CF
				控制标志寄存器：
					DF、TF、IF
				对应关系为：
					位 符号 说明 描述
					11 OF 溢出 溢出为1，否则为0
					10 DF 方向 串处理指令中用于控制方向
					9  IF 中断 中断标志
					8  TF 陷阱 陷阱标志
					7  SF 符号 运算结果为负数时为1，否则为0
					6  ZF 零   运算结果为0时为1，否则为0
					4  AF 辅助进位 计算运算时第三位（半字节）产生的进位，有进位为1，否则为0
					2  PF 奇偶 结果操作数中1的个数为偶数时为1，否则为0
					0  CF 进位 产生进位时为1，否则为0
	常用汇编指令集
		数据传送指令
			mov 目的操作数，源操作数
				实现寄存器-寄存器，内存-寄存器，寄存器-立即数之间的传送,内存与内存之间不能进行传送，不能传送到立里面
				示例：
					mov eax,158h
					mov eax,[00221144h]
					mov eax,ebx
					mov [11442200h],eax
					mov [11221122h],199h
			xchg 目的操作数，源操作数
				交换两个操作数的数据
				示例：
					xchg eax,ebx
					xchg [11224455h],eax
					xchg eax,[11002244h]
			push 操作数
				操作数压栈，在32位中执行一次push，将导致esp的值减4（栈方向从高地址向低地址延伸）
			pop 操作数
				操作数弹栈，是push的逆操作
				示例：
					push eax
					pop eax
					push 11002255h
					pop ebx
					push [11332244h]
					pop [11557766h]
			lea 目的操作数，源操作数
				装入有效地址，它的操作数就是地址，不是具体的数据，是和mov的差别
				示例：
					lea edi,[ebp+0000000ch]
		算术运算指令：
			add 目的操作数，源操作数
				执行加法，结果保存在目的操作数中
				示例：
					add eax,ebx
					add ecx,1
					add [00221144h],edx
			sub 目的操作数，源操作数
				执行减法，结果保存在目的操作数中
				示例：
					sub eax,ebx
					sub ecx,1
					sub [11002200h],edx
			adc 目的操作数，源操作数
				执行带进位的加法，结果保存在目的操作数中=目的操作数+源操作数+CF标志中的值
				示例：
					adc eax,ebx
					adc ecx,1
					adc [00554411h],edx
			sbb 目的操作数，源操作数
				执行带进位的减法，结果保存在目的操作数中=目的操作数-源操作数-CF标志中的值
				示例：
					sbb eax,ebx
					sbb ecx,1
					sbb [55441100h],edx
			inc 目的操作数
				给目的操作数+1
				示例：（在操作内存时，需要指定大小，也就是一个指针指明）
					inc eax
					inc dword ptr [00551100h]
			dec 目的操作数
				给目的操作数-1
				示例：
					dec ebx
					dec dword ptr [11002200h]
		位运算指令：
			and 目的操作数，源操作数
				逻辑按位与运算，结果保存在目的操作数中，影响标志位：OF、SF、ZF、PF、CF
				示例：
					and eax,ebx
					and ebx,[11002200h]
			or 目的操作数，源操作数
				逻辑按位或运算，结果保存在目的操作数中，影响标志位：OF、SF、ZF、PF、CF
				示例：
					or eax,ebx
					or ebx,[00220044h]
			not 目的操作数
				逻辑按位取反，结果放入目的操作数
				示例：
					not eax
			xor 目的操作数，源操作数
				逻辑异或操作，结果保存在目的操作数中，影响标志位：OF、SF、ZF、PF、CF
				示例：
				xor [00112233h],eax
			test 目的操作数，源操作数
				测试目的操作数的单个位，执行与操作，不改变目的操作数内容，影响标志位：OF、SF、ZF、PF、CF
				示例：
					test eax,1
		流程控制指令：
			cmp 目的操作数，源操作数
				比较两操作数，隐含执行减法操作,不改变目的操作数，影响标志位：OF、SF、ZF、AF、PF、CF
				示例：
					cmp eax,[33002200h]
			jmp 跳转目标
				无条件跳转到标号指定处
				示例：
					jmp eax
					jmp main
					jmp start
			jcc条件跳转指令，用于在运算或者比较之后使用，不是具体的指令，是一个指令代表，具体：
				跳转类别	标志位		含义
				jo 			OF=1		溢出
				jno			OF=0		无溢出
				jb/jc/jnae	CF=1		低于、进位、不高于等于
				jae/jnb/jnc	CF=0		高于等于、不低于、无进位
				je/jz		ZF=1		相等、等于零
				jne/jnz		ZF=0		不相等、不等于零
				jbe/jna		CF/ZF=1		低于等于、不高于
				ja/jnbe		CF&ZF=0		高于、不低于等于
				js			SF=1		符号为负
				jns			SF=0		符号为正
				jp/jpe		PF=1		1的个数为偶数
				jnp/jpo		PF=0		1的个数为奇数
				jl/jnge		SF!=OF		小于、不大于等于
				jge/jnl		SF==OF		大于等于、不小于
				jle/jng		ZF!=OF | ZF=1	小于等于、不大于
				jg/jnle		SF==OF & ZF=0	大于、不小于等于
			loop 目标地址
				循环控制指令，需要ecx控制循环次数，每次循环会将ecx值减1，ecx大于0时就执行循环
				示例：
					loop findtext
			call 目标地址
				过程调用指令，实际上是先入栈下一条指令地址，然后执行jmp
				相当于：
					push eip
					push eflags
					jmp 目标指令
			ret
				过程返回指令，实际上弹栈跳转地址之后跳转
				相当于：
					pop eflags
					pop eip
					jmp eip
	寻址方式：
		立即数寻址：
			mov eax,11001100h
		寄存器寻址：
			mov eax,ebx
		直接内存寻址：
			mov eax,[11002200h]
		寄存器间接内存寻址：
			mov eax,[ebx]
		基址变址寻址：
			mov eax,[ebx+10h]